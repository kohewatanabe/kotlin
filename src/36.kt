//Android開発では再利用を目的としないクラスを定義することがよくあり、そのような場合に便利なのが
//オブジェクト式(object {クラス本体})
//オブジェクト式は一度しか使われないクラスの実体が欲しい時に使う。
//下の例だと、ユーザーがボタンを押した時の処理をオブジェクト式で記述している。
//View.OnClickListenerを継承する必要があるためクラスである必要はあるが、基本的にボタンに
//加えたい処理とボタンは一対一対応するため、加えた処理は他のボタンで再利用することはない。
//従ってオブジェクト式で記述する。

//btn.setOnClickListener(object: View.OnClickListener {
//    override fun OnClick(view: View): String {
//        "ボダンがクリックされた時の処理"
//    }
//})

//View.OnClickListenerインターフェースが持つ抽象メソッドはonClickメソッドの１つだけ。
//このように抽象メソッドを１つしか持たないインターフェースのことをSAMインターフェースと呼び、
//オブジェクト式で実装するインターフェースがSAMインターフェースの場合、
//ラムダ式で置き換えてもっとシンプルに表現できる。
//setOnClickListenerの引数は必ずView.OnClickListenerインターフェースを実装している必要
//がある。またView.OnClickListenerインターフェースの抽象メソッドはonClickメソッドだけ。
//従って、新たな情報というのは抽象メソッドの実装のみ。
//従って下記のように書ける。

//btn.setOnClickListener({view: View -> クリックされた時の処理})

//また、ラムダ式においては以下も成り立つ
//.引数の型が明らかならば省略可能
//.引数を利用しないなら引数そのものも省略可能
//.ラムダ式をくくる丸括弧は省略可能
//btn.setOnClickListener {ボタンがクリックされた時の処理}